apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs
  labels:
    app: nodejs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
    spec:
      affinity: 
        podAntiAffinity: #чтобы обеспечить максимальную отказоустойчивость, нужно разнести поды по разным AZ
          preferredDuringSchedulingIgnoredDuringExecution: 
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nodejs
              topologyKey: topology.kubernetes.io/zone
      containers:
      - name: nodejs
        image: devops-project-webservice:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        resources: #нужно исходить из количества ядер, необходимых для стабильной работы вебприложения (предположим, что системе хватает 1cpu). По памяти все стабильно
          requests:
            cpu: 100m
            memory: "128M"
          limits:
            cpu: 1000m
            memory: "128M"
        readinessProbe: #проверяем готовность контейнера к принятию входящего трафика после его инициализации (5-10 секунд)
          httpGet:
            scheme: HTTP
            path: /healthz
            port: 3000
          initialDelaySeconds: 10 
          periodSeconds: 5 
-------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: nodejs-service
  labels:
    app: nodejs
spec:
  type: NodePort
  selector:
    app: nodejs
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
-------------------------------------------------
apiVersion: batch/v1
kind: CronJob #для минимального потребления ресурсов нужен планировщик cron, чтобы распределять ресурсы по дневным и ночным циклам
metadata:
  name: scale-up
spec:
  schedule: "0 7 * * *" #увеличить число реплик с 7 часов
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: kubectl-scaler
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            args:
            - /bin/sh
            - -c
            - kubectl scale --replicas=3 deployment/nodejs
          restartPolicy: OnFailure
------------------------------------------------
apiVersion: batch/v1
kind: CronJob #для минимального потребления ресурсов нужен планировщик cron, чтобы распределять ресурсы по дневным и ночным циклам
metadata:
  name: scale-down
spec:
  schedule: "0 22 * * *" #уменьшить число реплик с 22 часов
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: kubectl-scaler
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            args:
            - /bin/sh
            - -c
            - kubectl scale --replicas=1 deployment/nodejs
          restartPolicy: OnFailure
-------------------------------------------------
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler ##для минимального потребления ресурсов нужно гибкое масштабирование
metadata:
  name: nodejs-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nodejs
  minReplicas: 1
  maxReplicas: 4 #согласно условию четырех хватит, чтобы справиться с пиками нагрузки
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80 #Контрольное значение CPU для автомасштабирования
